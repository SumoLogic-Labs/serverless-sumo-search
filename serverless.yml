# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: s1ss-sls02

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  profile: s1ss_sls
  stage: dev
  region: us-west-2
  tracing: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:*
# Re-enable XRay once I figure out how to connect across step function invocations.
#        - "xray:PutTraceSegments"
#        - "xray:PutTelemetryRecords"
      Resource: "*"

functions:
  searchAsyncApi:
    handler: handler.searchAsyncApi
    memory: 128
    environment:
      statemachine_arn: ${self:resources.Outputs.Search.Value}
    events:
      - http:
          path: search
          method: post
  searchAsync:
    handler: handler.searchAsync
    memory: 128
    environment:
      statemachine_arn: ${self:resources.Outputs.Search.Value}
  start:
    handler: handler.start
    memory: 128
  poll:
    handler: handler.poll
    memory: 128
  dumpMessages:
    handler: handler.dumpMessages
    memory: 128
    timeout: 900
  dumpRecords:
    handler: handler.dumpRecords
    memory: 128
    timeout: 900

stepFunctions:
  stateMachines:
    sumosearch:
      name: 'sumosearch'
      definition:
        Comment: "Run a Sumo Logic query and get the results in an S3 object"
        StartAt: Start
        States:
          Start:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage, self:provider.stage}-start"
            Next: Wait
          Wait:
            Type: Wait
            Seconds: 1
            Next: Poll
          Poll:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage, self:provider.stage}-poll"
            Next: CheckDone
          CheckDone:
            Type: Choice
            Choices:
              - Variable: $.state
                StringEquals: "DONE GATHERING RESULTS"
                Next: Dump
            Default: Wait
          Dump:
            Type: Parallel
            Next: Fin
            Branches:
              - StartAt: DumpMessages
                States:
                  DumpMessages:
                    Type: Task
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage, self:provider.stage}-dumpMessages"
                    TimeoutSeconds: 300
                    HeartbeatSeconds: 60
                    End: true
              - StartAt: DumpRecords
                States:
                  DumpRecords:
                    Type: Task
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage, self:provider.stage}-dumpRecords"
                    TimeoutSeconds: 300
                    HeartbeatSeconds: 60
                    End: true
          Fin:
            Type: Pass
            End: true

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
#  - serverless-plugin-tracing

resources:
  Outputs:
    Search:
      Description: The ARN of the state machine
      Value:
        Ref: Sumosearch # Sic! First letter needs to be uppercase...

# Default boilerplate stuff commented out below.

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

